6.2. FBM2H:

6.2.1. (from d2.1.3: 5.2.1 Functionality Description)
This functionality benchmark aims at assessing the capabilities of a robot to correctly and autonomously navigate in a typical apartment, containing furniture and objects spread through the apartment’s rooms. The benchmark will use the RoCKIn@Home testbed. From a predefined starting position, the robot will receive a list of waypoints that it must visit to reach a goal position.

The motion capture system is used to acquire the actual pose of the robot and evaluate the position and orientation accuracy.

For this purpose, a markerset is fixed on the robot.

6.2.4. ROS nodes
When the benchmark is launched, these nodes are run: bmbox (fbm2h), world_map, map_server, mocap, record.

Of special interest are the following:

6.2.4.1. fbm2h:
This is the ROS node in charge of running the benchmark.
The source is stored in rockin_scoring/scripts/fbm2h.

The i-th segment is defined as: the robot's path from waypoint i-1 to waypoint i; segment 0: robot's path from starting pose to waypoint 0.

The script works as follows:

· Start up phase:
In the start up phase the BmBox goes through the states: BmBoxState.START, BmBoxState.WAITING_CLIENT.

When the benchmark is launched, the robot is in the starting position.
The transform from markerset to robot odometric center is loaded as parameter, for the appropriate team (specifyed as argument, see Execution TODO: link).
This is used to evaluate the robot pose when it reaches a waypoint.
The benchmark's parameters are loaded as well (see Goal data format TODO: link).

· Execution on each segment:
On each segment, the BmBox goes through the states: BmBoxState.READY, BmBoxState.TRANSMITTING_GOAL, BmBoxState.EXECUTING_GOAL, BmBoxState.WAITING_RESULT.

On the first segment (from starting pose to waypoint 0) BmBoxState.TRANSMITTING_GOAL's payload is the goal data, on every other segment (segment i: from waypoint i-1 to waypoint i) the payload is empty.

When the client (that is actually the refbox) receives the goal, the FSM transitions to ClientState.EXECUTING_GOAL and then to ClientState.WAITING_RESULT.
Once the robot reaches the waypoint, the refbox performs the transition from ClientState.WAITING_RESULT to ClientState.READY (the payload of ClientState.WAITING_RESULT is empty).

The markerset pose is acquired from the mocap system and the robot pose computed from the markerset to robot transform.
The accuracy of the robot pose wrt the waypoint pose is computed (see d2.1.3: 5.2.7).
The segment time is evaluated.

· End of benchmark:
In this phase the BmBox goes through the states: BmBoxState.READY, BmBoxState.TRANSMITTING_SCORE, BmBoxState.END.
The BmBoxState.TRANSMITTING_SCORE's payload contains the score. (see Score data format TODO: link)

6.2.4.2. record
When the benchmark is launched the record node will log the following topics:

/fbm2h/bmbox_state
/fbm2h/client_state
/fbm2h/refbox_state
/fbm2h/map
/fbm2h/map_metadata
/fbm2h/robot_at_home/pose
/fbm2h/robot_at_home/pose2d
/fbm2h/info
/tf
/rosout

Resulting logs are stored in ~/logs/.



6.2.5.0. Configuration and data formats:
The benchmark's parameters consist in the goal that is sent to the RefBox and the markerset-robot transforms.
The first is found in rockin_scoring/config/fbm2h.yaml and rockin_scoring/config/fbm2h_test.yaml, the transforms are in the directory rocking_scoring/transforms/.

6.2.5.0.1. Goal data format:
This is a summary of the goal's format. The goal is sent to the refbox as a string in yaml format.
The goal corresponds to the FBM2H's configuration, found in rockin_scoring/config/fbm2h.yaml, although num_waypoints is added before it is sent.

goal:
  waypoints: # list of Pose2D poses
  - [-2.12524914742, -1.60717535019, 1.55841375286]
  - [2.32184529305, -3.40717220306, 2.37683575141]
  - [1.73485660553, 3.14053320885, -0.0238841612192]
  - [-3.10801386833, 4.88111925125, -1.52614450226]
  - [4.30852985382, 3.19435501099, 2.20723667763]
  num_waypoints: 5 # computed by the benchmark's script as length(waypoints)
  starting_pose:
    [0.0, 0.0, 0.0]
  penalty_time: # not used in the benchmark, needed by the refbox
    120.0
  timeout_time: # not used in the benchmark, needed by the refbox
    120.0

6.2.5.0.2. Transform data format:
To run FBM2H, it is needed to provide a transform by specifying the argument team_name when launching the benchmark (see following paragraphs).

The transform is acquired as described in 6.2.6. Markerset-robot transform acquisition TODO: link

The transform is saved in a yaml file with the following structure:
transform-<team_name>.yaml

robot_info: <team_name> # the team's name or any other identifier
transform_timestamp: <%Y-%m-%d_%H:%M:%S> # the acquisition timestamp
marker_to_robot_transform:
- [<x>, <y>, <z>] # the translation from markerset to robot
- [<qx>, <qy>, <qz>, <qw>] # the orientation of the robot wrt to the markerset
robot_to_marker_transform:
- [<x>, <y>, <z>] # the translation from robot to markerset
- [<qx>, <qy>, <qz>, <qw>] # the orientation of the markerset wrt to the robot

The identity transform, that can be used during testing:

transform-identity.yaml

robot_info: identity
transform_timestamp: 0
marker_to_robot_transform:
- [0.0, 0.0, 0.0]
- [0.0, 0.0, 0.0, 1.0]
robot_to_marker_transform:
- [0.0, 0.0, 0.0]
- [0.0, 0.0, 0.0, 1.0]


6.2.5.0.3. Score data format:
This is a summary of the score's format.
The score is sent to the refbox at the end of the benchmark as a string in yaml format.

position_accuracy
orientation_accuracy
execution_time
hits # the number of hits, manually inserted
timeout_segments: 0 # always 0
details:
  marker-robot transform # the transform used during the benchmark
segments_details: # details for each segment
  i: # with i from 0 to number of waypoints - 1
    dinstance_error
    end_segment_time
    orientation_error
    refbox_timeout: false # always false
    result_payload: {} # always empty
    robot_pose: # the robot pose acquired when it reached the waypoint
    segment_time
    start_segment_time
    target_pose: # the pose of the waypoint
    timeout: false # always false


6.2.5. Execution:

Before executing the benchmark,
· acquire the robot's transforms (although it is possible to use the identity transform during testing);
· configure the rigid body in the mocap software, especially the rigidbody's id in Motive have to match the value in rockin_mocap/config/all_home_mocap.yaml (in MotiveTracker: rigid body properties/advanced/user data);
· check the benchmark's configuration.

6.2.5.1. Executing with the refbox
To run the benchmark, execute the command
$ roslaunch rockin_scoring fbm2h.launch team_name:=<team_name> # <team_name> must be the same as in transform-<team_name>.yaml

A terminal opens, where the fbm2h script's output is displayed.
The benchmark is completely autonomous and doesn't require any user input during the exeution.
Only at the end of the benchmark it is prompted the number of hits (as referred by the referee).

6.2.5.2. Testing with mocap system
To test the benchmark execute this command:
$ roslaunch rockin_scoring fbm2h_test.launch team_name:=identity

Three terminals open for fbm2h_refbox_test, fbm2h_client_test and fbm2h.
The scripts rockin_scoring/scripts/fbm2h_client_test and rockin_scoring/scripts/fbm2h_refbox_test simulate the refbox by publishing the FSM' state.

In the Client terminal you have to confirm when to send the result (corresponding to the robot reaching the next waypoint).

6.2.5.3. Testing without mocap system
This test consists in running the normal test without launching the mocap_optitrack, rosbag record, map_server and tf publisher but rather playing a bag that provides the topics of these nodes.
The scripts rockin_scoring/scripts/fbm2h_client_test and rockin_scoring/scripts/fbm2h_refbox_test simulate the refbox like in 6.2.5.2. Testing with mocap system TODO: link

To test the benchmark execute these commands, in this order and each in a different terminal:
$ roscore
$ rosparam set use_sim_time true
$ rockin_mocap/test_logs$ rosbag play --clock log_fbm2h_mocap_2015-10-23-16-15-40_0.bag
$ roslaunch rockin_scoring fbm2h_test_optitrackless.launch team_name:=identity # it's better to wait a second before running this command to leave time to rosbag and tf to emit some transforms.

A recorded bag is available (rockin_mocap/test_logs/log_fbm2h_mocap_2015-10-23-16-15-40_0.bag) and in the file rockin_mocap/test_logs/log_fbm2h_mocap_2015-10-23-16-15-40_0_reached_waypoint_timing.yaml there are the reached_waypoint "timestamps" of the recorded robot.
You have to send them manually through the fmb2h_client_test terminal.

6.2.6. Markerset-robot transform acquisition:
With this package it's possible to acquire the tf transform from the markerset to the robot through the mocap system.

To acquire a transform, position the robot in (x=0, y=0, theta=0) and launch rockin_acquire_markerset_transform by executing the command
$ roslaunch rockin_acquire_markerset_transform acquire.launch
It is then prompted the team_name.

The transform is saved in ~/logs/transform-<team_name>.yaml.

In rockin_acquire_markerset_transform/config/mocap.yaml there is the mocap cofiguration. It is not needed to configure this normally.

